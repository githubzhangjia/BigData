#pragma once
#include<iostream>
#include<string>
#include<assert.h>

typedef long long INT64;
#define UN_INIT 0xCCCCCCCCCCCCCCCC
#define MAX_INT64 0x7FFFFFFFFFFFFFFF 
#define MIN_INT64 0x8000000000000000

using namespace std;

class BigData
{
public:
	BigData(INT64 value);//传入数字
	BigData(char*strData);//传入字符
public:
	BigData operator+(const BigData &bigdata);
	BigData operator-(const BigData &bigdate);
	BigData operator*(const BigData &bigdate);
	BigData operator/(const BigData &bigdate);
private:
	bool _IsINT64Overflow() const;
	void _INT64ToString();
	string Add(string left, string right);
	string Sub(string left, string right);
	string Mul(string left, string right);
	string Div(string left, string right);
private:
	long long _value;
	string _strData;
};

//BigData.cpp
#include "BigData.h"

BigData::BigData(INT64 value)//传入数字
:_value(value)
, _strData("")
{
	_INT64ToString();
}
bool BigData::_IsINT64Overflow() const//检测字符串是否溢出
{
	string tmp("+9223372036854775807");
	if ('-' == _strData[0])
		tmp = "-9223372036854775808";
	if (_strData.size() < tmp.size())
		return false;
	if ((_strData.size() == tmp.size()) && (_strData < tmp))
		return false;
	return true;
}
BigData::BigData(char*pData)//传入字符
{
	char cSymbol = pData[0];
	//筛选有效字符串
	if (pData[0] <= '9'&&pData[0] >= '0')
	{
		cSymbol = '+';
	}
	if (pData[0] == '+' || pData[0] == '-')
	{
		pData++;
	}
	while ('0' == *pData)
	{
		pData++;
	}

	_strData.resize(strlen(pData) + 1);//加1符号位
	_strData[0] = cSymbol;
	int i = 1;
	 _value = 0;//第一次由于_value

	while (*pData >= '0'&&*pData <= '9')//将传入的字符保存两份，一份保存到整形中，一份保留到string中
	{
		_value = 10 * _value + *pData - '0';
		_strData[i++] = *pData;
		pData++;
	}
	if (_IsINT64Overflow())
	{
		_value = UN_INIT;
	}
	if (cSymbol == '-'&&_value <= MAX_INT64)
	{
		_value = 0 - _value;
	}
	_strData.resize(i);//为_strData分配合适的空间;
}

BigData BigData::operator+(const BigData &bigdata)
{
	if (!_IsINT64Overflow() && (!bigdata._IsINT64Overflow()))//若两数都未溢出
	{
		if ((_value>=0&&bigdata._value<0)||(_value<0&&bigdata._value>=0))//异号则不存在结果溢出的问题
		{
			return BigData(_value + bigdata._value);
		}
		//8+2=10 -8-2
		if (((_value>=0) && ((MAX_INT64 - bigdata._value) >= _value)) ||
			((_value<0) && ((long long)MIN_INT64 - bigdata._value <= _value)))//两数同号，相加结果不溢出的情况
		{
			return BigData(_value + bigdata._value);
		}
		//else//两数同号，结果溢出
		//{
		//	return BigData((char*)Add(_strData, bigdata._strData).c_str());//string::c_str将一个string类型的转为指针类型
		//}
	}

	//1.至少有一个溢出
	//2.计算结果溢出
	std::string strRet;
	if (_strData[0] == bigdata._strData[0])
	{
		strRet = Add(_strData, bigdata._strData);
	}
	else
		strRet = Sub(_strData, bigdata._strData);
	return BigData((char*)strRet.c_str());
}
string BigData::Add(std::string left, std::string right)
{
	int Lsize = left.size();
	int Rsize = right.size();
	
	if (Lsize < Rsize)
	{
		swap(left, right);
		swap(Lsize, Rsize);
	}
	std::string strRet;
	strRet.resize(Lsize + 1);
	strRet[0] = left[0];
	char cStep = 0;
	//逐位相加
	for (int i=1; i < Lsize; i++)
	{
		int cRet = left[Lsize - i]-'0'+cStep;
		
		if (Rsize>i)
		{
			cRet += right[Rsize - i]-'0';
		}
		
		strRet[Lsize - i + 1] = cRet % 10 + '0';
		cStep = cRet / 10;
	}
	strRet[1] = cStep+'0';
	return strRet;
}
BigData BigData::operator-(const BigData &bigdate)
{
	if ((!_IsINT64Overflow()) && (!bigdate._IsINT64Overflow()))//两数均未溢出
	{
		if ((_value>=0&&bigdate._value>=0)||(_value<0&&bigdate._value<0))//同号，结果一定不溢出
		{
			return BigData(_value - bigdate._value);
		}
		else//异号
		{
			if ((_value<0 && ((long long)MIN_INT64 - _value <= bigdate._value)) ||
				(_value>=0 &&_value - MAX_INT64 <= bigdate._value))//未溢出
				return BigData(_value - bigdate._value);
		}
	}
	
	//1.至少有一个操作数溢出
	//2.结果溢出
	string strRet;
	if (_strData[0] != bigdate._strData[0])
	{
		//负-正=负  正-负=正
		if (_strData[0] == '-')
		{
			BigData tmp((char*)bigdate._strData.c_str());
			tmp._strData[0] = '-';
			strRet = Add(_strData, tmp._strData);
		}
		else
		{
			BigData tmp((char*)bigdate._strData.c_str());
			tmp._strData[0] = '+';
			strRet = Add(_strData, tmp._strData);
		}
	}
	else
		strRet = Sub(_strData, bigdate._strData);
	return BigData((char*)strRet.c_str());
		
}
string BigData::Sub(string left, string right)
 {
	int Lsize = left.size();
	int Rsize = right.size();
	char symbol = left[0];

	if (Lsize < Rsize || (Lsize == Rsize&&left < right))
	{
		swap(left, right);
		swap(Lsize, Rsize);
		
		if ('+' == symbol)
			symbol = '-';
		else
			symbol = '+';
	}
	//-21-(-23)=2	-23-(-21)=-2		21-23=-2	21-20=1  9-21=-12
	//				-21-(-23)=2			23-21=2				 21-9=12
	string strRet;
	strRet.resize(Lsize);
	strRet[0] = symbol;//置符号位

	//逐位相减	1.取left的最后一位，逐次向前 2.取right的每一位（后向前）3.直接相减	4.保存结果
	for (int i = 1; i < Lsize ; i++)
	{
		char cRet = left[Lsize - i]-'0';
		if (Rsize>i)
		{
			cRet -= right[Rsize - i] - '0';
		}
		if (cRet < 0)
		{
			left[Lsize - i - 1] -= 1;
			cRet += 10;
		}
		strRet[Lsize - i] = cRet + '0';
	}
	return strRet;
}
BigData BigData::operator*(const BigData &bigdate)
{
	if (_value == 0 || bigdate._value == 0)//零与任何数相乘均为0
		return BigData(INT64(0));
	if ((!_IsINT64Overflow()) && (!bigdate._IsINT64Overflow()))//两数均不溢出
	{
		if (_strData[0] == bigdate._strData[0])//同号
		{
			if (_strData[0] == '+'&&_value <= (MAX_INT64 / bigdate._value) ||
				_strData[0] == '-'&&_value >= (MAX_INT64 / bigdate._value))//同号结果不溢出
			{//2*11=22	2*5=10 -2*-5=10	
				return BigData(_value*bigdate._value);
			}
			
		}
		else
		{
			if ((_strData[0] == '+' && (_value <= ((long long)MIN_INT64 / bigdate._value))) ||//2*-5=-10
				(_strData[0] == '-' && (_value >= ((long long)MIN_INT64 / bigdate._value))))//-2*5=-10
				return BigData(_value*bigdate._value);//异号结果不溢出
			
		}
	}
	//结果溢出
		return BigData((char*)Mul(_strData, bigdate._strData).c_str());
	
}
string BigData::Mul(string left, string right)
{
	int Lsize = left.size();
	int Rsize = right.size();
	
	if (Lsize > Rsize)
	{
		swap(left, right);
		swap(Lsize, Rsize);
	}
	
	char cSymbol = '+';
	if (left[0] != right[0])//同号相乘为正，异号为父
	{
		cSymbol = '-';
	}
	string strRet;
	strRet.assign(Lsize + Rsize - 1,'0');//赋值
	strRet[0] = cSymbol;
	int DataLen = strRet.size();
	
	int offset = 0;//错位
	
	for (int i = 1; i < Lsize; i++)
	{
		char cLeft = left[Lsize - i] - '0';
		char cStep = 0;
		if (cLeft == 0)
		{
			offset++;
			continue;//结束本次循环
		}
		for (int j = 1; j < Rsize; j++)
		{
			char cRet = cLeft*(right[Rsize - j] - '0');
			cRet += cStep;
			cRet += (strRet[DataLen - j - offset] - '0');
			strRet[DataLen - j - offset] = cRet % 10 + '0';
			cStep = cRet / 10;
		}
		strRet[DataLen - Rsize - offset] += cStep;
		offset++;
	}
	return strRet;
}
